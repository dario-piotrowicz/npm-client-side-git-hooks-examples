#!/bin/sh

# here we simply run our lint command which checks index.js
npm run lint

# we then return $? which is the result of the operation
# if there are errors this will be one, thus the hook will prevent
# the commit, if there are no errors the commit will continue instead
exit $?

###########################################
###########################################
###########################################

# "npm run lint" works perfectly in our example in which anyway
# we only have one file to check, but in normal projects the number
# of total files could be quite big and checking/linting all of them
# can take some time, so there are other possile solutions which
# only take into consideration the files staged for the commit
# such as: npm run lint-staged (check the configuration in the package.json)
# ( feel free to replace "npm run lint" above with "npm run lint-staged"
# and give it a go )

###########################################
###########################################
###########################################

# Another solution which does not required the installation of dependencies
# is to actually implement a script which only checks/lints the staged files
# this can be done by using git and standard scripting features, for such
# a script could be (this would be the entire pre-commit):

#
# git diff --cached --name-only --diff-filter=ACMRTUB | \
# grep '\.js' | \
# xargs ./node_modules/.bin/eslint
#
# exit $?

